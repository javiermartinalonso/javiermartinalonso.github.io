docker run -p 8529:8529 -e ARANGO_ROOT_PASSWORD=openSesame arangodb/arangodb:3.8.1
docker run --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=admin -d postgres
docker run --name sqlserver -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=password!1' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2019-latest




docker images
docker system prune -a --volumes

mvn clean install package -Dmaven.test.skip=true -Pdev


docker build . -t bonita_mtc
docker run -it -p 8080:8080 --rm bonita_mtc
- entrar en el contenedor que se est√° ejecutando pudiendo ejecutar comandos desde linea de comandos
docker exec -it bonita_mtc sh
docker exec -u root -it 14a sh

- ver los logs
docker logs -f <name_container>

- entrar en el contenedor para ver lo que hay durante el arranque (entrar con el hipervisor de windows)
docker run -it --rm --entrypoint="/bin/bash" bonita_mtc

- copiar contenido del contendor al host
docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-
docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH

docker cp bonita:/opt/bonita/ C:\10_workspaces\albatross\om\soo\soo_bpm_bonita_7.10.4\contenedor
docker cp bonita_7.12:/opt/files C:\10_workspaces\albatross\om\soo\soo_bpm_bonita_docker_2021\contenedor
docker cp bonita_mtc:/opt/files/ C:\10_workspaces\albatross\om\soo\soo_bpm_bonita_docker_2021\contenedor
 
 
 
https://training.play-with-docker.com/microservice-orchestration/
https://training.play-with-docker.com/swarm-stack-intro/




#Eliminar datos no utilizados
https://www.vidaxp.com/tecnologia/como-borrar-imagenes-contenedores-y-volumenes-docker/
docker system prune [OPTIONS]

De forma predeterminada, los vol√∫menes no se eliminan para evitar que se eliminen datos importantes si actualmente no hay ning√∫n contenedor que use el volumen. 
Use la bandera --volumes cuando ejecute el comando para podar tambi√©n los vol√∫menes:

$ docker system prune -a --volumes
  docker system prune -f ‚Äìvolume


La soluci√≥n es bien sencilla. Con el siguiente script pod√©is ver el listado de volumenes huerfanos:

1
docker volume ls -qf dangling=true
Y el siguiente script borrar√° todos estos volumenes que nos sobran(Pod√©is, directamente, borrarlos sin pasar por ver el listado üòÄ ):

1
docker volume rm $(docker volume ls -qf dangling=true)






#comprobar los vol√∫menes que hemos creados ejecutando:
docker volume ls

aunque borremos el contenedor, el volumen no se borra



Para averiguar los nombres de los contenedores en ejecuci√≥n, ejecute el siguiente comando:
 docker ps --format {{.Names}}




https://training.play-with-docker.com/beginner-linux/

1 List all containers.

docker container ls --all

2 List the running containers.

docker container ls

Ejecute un contenedor Docker y acceda a su shell.

 docker container run --interactive --tty --rm ubuntu bash
En este ejemplo, le estamos dando a Docker tres par√°metros:

--interactive dice que quieres una sesi√≥n interactiva.
--tty asigna un pseudo-tty.
--rm le dice a Docker que contin√∫e y retire el contenedor cuando termine de ejecutarse.
Los dos primeros par√°metros le permiten interactuar con el contenedor Docker.

Tambi√©n le estamos diciendo al contenedor que se ejecute bashcomo su proceso principal (PID 1).

Cuando se inicie el contenedor, caer√° en el shell bash con la solicitud predeterminada root@<container id>:/#. Docker se ha conectado al shell en el contenedor, retransmitiendo entrada y salida entre su sesi√≥n local y la sesi√≥n de shell en el contenedor.


"ls /" enumerar√° el contenido del director ra√≠z en el contenedor, "ps aux"  mostrar√° los procesos en ejecuci√≥n en el contenedor, "cat /etc/issue" mostrar√° qu√© distribuci√≥n de Linux est√° ejecutando el contenedor, en este caso Ubuntu 18.04.1 LTS.


Ejecute un nuevo contenedor MySQL con el siguiente comando.

 docker container run \
 --detach \
 --name mydb \
 -e MYSQL_ROOT_PASSWORD=my-secret-pw \
 mysql:latest
--detach ejecutar√° el contenedor en segundo plano.
--namelo llamar√° mydb .
-e utilizar√° una variable de entorno para especificar la contrase√±a de root (NOTA: esto nunca debe hacerse en producci√≥n).


1 List all containers.

docker ps
docker container ls --all
docker container ls
docker container ls -a

2 List the running containers.

docker container ls

3 You can check what‚Äôs happening in your containers by using a couple of built-in Docker commands: docker container logs and docker container top.

	docker container logs mydb
	docker logs mydb
 
 
4 Let‚Äôs look at the processes running inside the container.

   docker container top mydb
   






5 Liste la versi√≥n de MySQL usando docker container exec.

"docker container exec" le permite ejecutar un comando dentro de un contenedor. En este ejemplo, usaremos docker container execpara ejecutar el equivalente de la l√≠nea de comandos mysql --user=root --password=$MYSQL_ROOT_PASSWORD --versiondentro de nuestro contenedor MySQL.

 docker exec -it mydb \
 mysql --user=root --password=$MYSQL_ROOT_PASSWORD --version
 

5-1 Tambi√©n puede usar "docker container exec" para conectarse a un nuevo proceso de shell dentro de un contenedor que ya se est√° ejecutando. Ejecutar el siguiente comando le dar√° un shell interactivo ( sh) dentro de su contenedor MySQL.

 docker exec -it mydb sh
 
 
6 Verifiquemos el n√∫mero de versi√≥n ejecutando el mismo comando nuevamente, solo que esta vez desde la nueva sesi√≥n de shell en el contenedor.

 mysql --user=root --password=$MYSQL_ROOT_PASSWORD --version

7 Escriba exit para salir de la sesi√≥n de shell interactivo.

 exit
 
 


docker-compose up: da instrucciones a Docker para crear el contendor, y ejecutarlo segun docker-compose.yml
docker-compose up -d: da instrucciones a Docker para crear el contendor y ejecutarlo en segundo plano segun docker-compose.yml
docker-compose down: apaga todo los servicios que levant√≥ con docker-compose up.

*docker-compose ps *: permite ver los contenedores funcionando.

docker-compose exec: permite ejecutar un comando a uno de los servicios levantados de Docker-compose.

‚Ä¢	docker-compose logs -f --tail=0: Imprime mensajes de registro de todos los contenedores. -f significa que el comando no se completar√° y, en cambio, espera nuevos mensajes de registro. --tail=0 significa que no queremos ver ning√∫n mensaje de registro anterior, solo mensajes nuevos.
Con ello conseguiremos un acceso a la m√°quina virtual en la propia l√≠nea de comandos..

# Usage: docker-machine ssh [nombre maquina docker]
docker-machine ssh default







#construir imagen

docker build . -t activation/1.0.6

#arrancar el contenedor
docker run --name activator -p 8080:8080 activator


#comprobar la configuracion del compose levantados
docker-compose config


forzar a reconstruir las imagenes y contenedores
docker-compose up -d --force-recreate --build

Options:
  -d                  Detached mode: Run containers in the background,
                      print new container names. Incompatible with
                      --abort-on-container-exit.
  --force-recreate    Recreate containers even if their configuration
                      and image haven't changed.
  --build             Build images before starting containers.




#de esta forma podriamos tener un fichero compose y uno adicional para activar el modo depuracion y los puertos de depuracion.
docker-compose -f docker-compose.yml -f docker-compose.debug.yml up



#Escalar un contenedor
#para tener 4 instancias de aplicaci√≥n "prueba" en ejecuci√≥n.
docker-compose scale test-app=4




#averiguar qu√© capas contiene una imagen de Docker
docker history <imagen>


#mostrar la configuraci√≥n de nuestro container.
docker inspect oracle/database:12.1.0.2-ee 






#descargar imagen del repositorio de imagenes
docker pull <imagen>


#Estad√≠sticas de Docker para contenedores
docker container stats
#para listar todos los contenedores que se ejecutan con la CPU, memoria, redes de E / S y las estad√≠sticas del bloque de E / S.
docker container stats $(docker container ps --format={{.Names}})



docker rm -f $ (docker ps -aq)
El comando docker rm -f detiene y elimina los contenedores cuyos ID de contenedor se especifican para el comando.
El comando docker ps -aq enumera las ID de contenedor de todos los contenedores en ejecuci√≥n y detenidos en el motor Docker. 
La opci√≥n -q reduce la salida del comando docker ps para que solo enumere las ID de contenedor.


#Detener contenedores
#Cuando detiene un contenedor, los datos no se eliminan, a menos que elimine el contenedor.
docker container stop <container_id>

#Ajuste de memoria
#Para optimizar el uso de memoria para aplicaciones que se ejecutan en el contenedor, puede configurar los par√°metros de memoria Java en Dockerfileodocker-compose.yml

#Agregar par√°metros de memoria a Dockerfile. Establecer la variable de entorno.
ENV JAVA_OPTS=-Xmx512m -Xms256m


Agregar par√°metros de memoria a docker-compose.yml
Esta soluci√≥n se desea sobre Dockerfile. De esta manera, usted tiene un √∫nico punto de control para la configuraci√≥n de la memoria en todos los contenedores que componen su aplicaci√≥n.

Agrega secci√≥n el JAVA_OPT Sen la environment.

    environment:
      - (...)
      - JAVA_OPTS=-Xmx512m -Xms256m
Dependiendo de la imagen base de Docker, JAVA_OPTS no funcionar√°. En este caso, intente usar _JAVA_OPTIONS en su lugar:

    environment:
      - (...)
      - _JAVA_OPTIONS=-Xmx512m -Xms256m





# Para probar una aplicacion web, nos basta con ver que nos devuelve la url del siguiente modo. (supongamos que est√° escuchando en el puerto 8080)

$ curl http://localhost:8080

Si estamos usando alguna maquina virtual o similar y desconocemos la direcci√≥n ip (en este caso 127.0.0.1 o localhost), podemos usar el siguiente comando:

$ curl http://$(boot2docker ip 2>/dev/null):8080

Entonces tengo que usar el comando boot2docker, que me da la direcci√≥n IP de mi VM. 
As√≠ que aqu√≠ estoy obteniendo la direcci√≥n IP de mi m√°quina virtual, ignorando cualquier error que salga y mirando el puerto 8080

#######################################################################################################################
Instalar el editor en un contenedor sin vi
https://blog.softwaremill.com/editing-files-in-a-docker-container-f36d76b9613c


app # apt-get update 
app # apt-get -y install vim
